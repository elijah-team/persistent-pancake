diff -urw mal/core.java ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/core.java
--- mal/core.java	2023-11-24 23:08:27.511960604 -0500
+++ ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/core.java	2023-11-24 19:40:33.370977631 -0500
@@ -1,7 +1,6 @@
 package tripleo.vendor.mal;
 
 import com.google.common.collect.ImmutableMap;
-import org.jetbrains.annotations.NotNull;
 import tripleo.vendor.mal.types.MalAtom;
 import tripleo.vendor.mal.types.MalConstant;
 import tripleo.vendor.mal.types.MalContinue;
@@ -26,6 +25,8 @@
 import java.util.Map;
 import java.util.Scanner;
 
+import static tripleo.vendor.mal.readline.readline;
+
 public class core {
 	public static ImmutableMap<String, MalVal> ns;
 
@@ -36,39 +37,39 @@
 
 
 	// Errors/Exceptions
-	static @NotNull MalFunction mal_throw = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction mal_throw = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			throw new MalException(a.nth(0));
 		}
 	};
 
 
 	// Scalar functions
-	static @NotNull MalFunction nil_Q = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction nil_Q = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return args.nth(0) == Nil ? True : False;
 		}
 	};
 
 
-	static @NotNull MalFunction true_Q = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction true_Q = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return args.nth(0) == True ? True : False;
 		}
 	};
 
-	static @NotNull MalFunction false_Q  = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction false_Q  = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return args.nth(0) == False ? True : False;
 		}
 	};
-	static @NotNull MalFunction number_Q = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction number_Q = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return args.nth(0) instanceof MalInteger ? True : False;
 		}
 	};
-	static @NotNull MalFunction string_Q = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction string_Q = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			if (!(args.nth(0) instanceof MalString)) {
 				return False;
 			}
@@ -80,18 +81,18 @@
 		}
 	};
 
-	static @NotNull MalFunction symbol    = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction symbol    = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return new MalSymbol((MalString) args.nth(0));
 		}
 	};
-	static @NotNull MalFunction symbol_Q  = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction symbol_Q  = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return args.nth(0) instanceof MalSymbol ? True : False;
 		}
 	};
-	static @NotNull MalFunction keyword   = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction keyword   = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			if (args.nth(0) instanceof MalString &&
 					(((MalString) args.nth(0)).getValue().charAt(0) == '\u029e')) {
 				return args.nth(0);
@@ -101,8 +102,8 @@
 			}
 		}
 	};
-	static @NotNull MalFunction keyword_Q = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction keyword_Q = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			if (!(args.nth(0) instanceof MalString)) {
 				return False;
 			}
@@ -113,16 +114,16 @@
 			return True;
 		}
 	};
-	static @NotNull MalFunction fn_Q      = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction fn_Q      = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			if (!(args.nth(0) instanceof MalFunction)) {
 				return False;
 			}
 			return ((MalFunction) args.nth(0)).isMacro() ? False : True;
 		}
 	};
-	static @NotNull MalFunction macro_Q   = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction macro_Q   = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			if (!(args.nth(0) instanceof MalFunction)) {
 				return False;
 			}
@@ -132,44 +133,44 @@
 
 
 	// String functions
-	static @NotNull MalFunction pr_str = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction pr_str = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return new MalString(printer._pr_str_args(args, " ", true));
 		}
 	};
 
-	static @NotNull MalFunction str = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction str = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return new MalString(printer._pr_str_args(args, "", false));
 		}
 	};
 
-	static @NotNull MalFunction prn = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction prn = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			System.out.println(printer._pr_str_args(args, " ", true));
 			return Nil;
 		}
 	};
 
-	static @NotNull MalFunction println = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction println = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			System.out.println(printer._pr_str_args(args, " ", false));
 			return Nil;
 		}
 	};
 
 
-	static @NotNull MalFunction equal_Q = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction equal_Q = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			return types._equal_Q(args.nth(0), args.nth(1)) ? True : False;
 		}
 	};
 
-	static @NotNull MalFunction mal_readline = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction mal_readline = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			final String prompt = ((MalString) args.nth(0)).getValue();
 			try {
-				return new MalString(readline.readline(prompt));
+				return new MalString(readline(prompt));
 			} catch (final IOException e) {
 				throw new MalException(new MalString(e.getMessage()));
 			} catch (final readline.EOFException e) {
@@ -178,8 +179,8 @@
 		}
 	};
 
-	static @NotNull MalFunction read_string = new MalFunction() {
-		public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction read_string = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			try {
 				return reader.read_str(((MalString) args.nth(0)).getValue());
 			} catch (final MalContinue c) {
@@ -188,8 +189,8 @@
 		}
 	};
 
-	static @NotNull MalFunction slurp = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction slurp = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			final String fname = ((MalString) args.nth(0)).getValue();
 			try {
 				// Scanner drops final newline, so add it back
@@ -204,98 +205,98 @@
 
 
 	// Number functions
-	static @NotNull MalFunction add      = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction add      = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalInteger) a.nth(0)).add((MalInteger) a.nth(1));
 		}
 	};
-	static @NotNull MalFunction subtract = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction subtract = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalInteger) a.nth(0)).subtract((MalInteger) a.nth(1));
 		}
 	};
-	static @NotNull MalFunction multiply = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction multiply = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalInteger) a.nth(0)).multiply((MalInteger) a.nth(1));
 		}
 	};
-	static @NotNull MalFunction divide   = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction divide   = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalInteger) a.nth(0)).divide((MalInteger) a.nth(1));
 		}
 	};
 
-	static @NotNull MalFunction lt  = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction lt  = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalInteger) a.nth(0)).lt((MalInteger) a.nth(1));
 		}
 	};
-	static @NotNull MalFunction lte = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction lte = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalInteger) a.nth(0)).lte((MalInteger) a.nth(1));
 		}
 	};
-	static @NotNull MalFunction gt  = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction gt  = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalInteger) a.nth(0)).gt((MalInteger) a.nth(1));
 		}
 	};
-	static @NotNull MalFunction gte = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction gte = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalInteger) a.nth(0)).gte((MalInteger) a.nth(1));
 		}
 	};
 
-	static @NotNull MalFunction time_ms = new MalFunction() {
-		public @NotNull MalVal apply(final MalList a) throws MalThrowable {
+	static MalFunction time_ms = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return new MalInteger((int) System.currentTimeMillis());
 		}
 	};
 
 
 	// List functions
-	static @NotNull MalFunction new_list     = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction new_list     = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return new MalList(a.value);
 		}
 	};
-	static @NotNull MalFunction list_Q       = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction list_Q       = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return _list_Q(a.nth(0)) ? True : False;
 		}
 	};
 	// Vector functions
-	static @NotNull MalFunction new_vector   = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction new_vector   = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return new MalVector(a.value);
 		}
 	};
-	static @NotNull MalFunction vector_Q     = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction vector_Q     = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return _vector_Q(a.nth(0)) ? True : False;
 		}
 	};
 	// HashMap functions
-	static @NotNull MalFunction new_hash_map = new MalFunction() {
-		public @NotNull MalVal apply(final MalList a) throws MalThrowable {
+	static MalFunction new_hash_map = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return new MalHashMap(a);
 		}
 	};
-	static @NotNull MalFunction hash_map_Q   = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction hash_map_Q   = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return a.nth(0) instanceof MalHashMap ? True : False;
 		}
 	};
-	static @NotNull MalFunction contains_Q   = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction contains_Q   = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final String                  key = ((MalString) a.nth(1)).getValue();
 			final MalHashMap              mhm = (MalHashMap) a.nth(0);
 			final HashMap<String, MalVal> hm  = (HashMap<String, MalVal>) mhm.value;
 			return hm.containsKey(key) ? True : False;
 		}
 	};
-	static @NotNull MalFunction assoc        = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction assoc        = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalHashMap              mhm     = (MalHashMap) a.nth(0);
 			final HashMap<String, MalVal> hm      = (HashMap<String, MalVal>) mhm.value;
 			final MalHashMap              new_mhm = new MalHashMap((Map) hm.clone());
@@ -303,8 +304,8 @@
 			return new_mhm;
 		}
 	};
-	static @NotNull MalFunction dissoc       = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction dissoc       = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalHashMap              mhm     = (MalHashMap) a.nth(0);
 			final HashMap<String, MalVal> hm      = (HashMap<String, MalVal>) mhm.value;
 			final MalHashMap              new_mhm = new MalHashMap((Map) hm.clone());
@@ -312,8 +313,8 @@
 			return new_mhm;
 		}
 	};
-	static @NotNull MalFunction get          = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction get          = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			if (a.nth(0) == Nil) {
 				return Nil;
 			} else {
@@ -328,8 +329,8 @@
 			}
 		}
 	};
-	static @NotNull MalFunction keys         = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction keys         = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalHashMap              mhm     = (MalHashMap) a.nth(0);
 			final HashMap<String, MalVal> hm      = (HashMap<String, MalVal>) mhm.value;
 			final MalList                 key_lst = new MalList();
@@ -339,8 +340,8 @@
 			return key_lst;
 		}
 	};
-	static @NotNull MalFunction vals         = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction vals         = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalHashMap              mhm = (MalHashMap) a.nth(0);
 			final HashMap<String, MalVal> hm  = (HashMap<String, MalVal>) mhm.value;
 			//return new ArrayList<MalVal>(((HashMap<String,MalVal>)hm).values());
@@ -352,13 +353,13 @@
 		}
 	};
 	// Sequence functions
-	static @NotNull MalFunction sequential_Q = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction sequential_Q = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return a.nth(0) instanceof MalList ? True : False;
 		}
 	};
-	static @NotNull MalFunction count        = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction count        = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			if (a.nth(0) == Nil) {
 				return new MalInteger(0);
 			} else {
@@ -366,8 +367,8 @@
 			}
 		}
 	};
-	static @NotNull MalFunction empty_Q      = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction empty_Q      = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalVal exp = a.nth(0);
 			if (exp == Nil || (exp instanceof MalList &&
 					((MalList) exp).size() == 0)) {
@@ -377,16 +378,16 @@
 			}
 		}
 	};
-	static @NotNull MalFunction cons         = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction cons         = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final List<MalVal> lst = new ArrayList<MalVal>();
 			lst.add(a.nth(0));
 			lst.addAll(((MalList) a.nth(1)).getList());
 			return new MalList(lst);
 		}
 	};
-	static @NotNull MalFunction concat       = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction concat       = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			if (a.size() == 0) {
 				return new MalList();
 			}
@@ -398,13 +399,13 @@
 			return new MalList(lst);
 		}
 	};
-	static @NotNull MalFunction vec          = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction vec          = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return new MalVector(((MalList) a.nth(0)).getList());
 		}
 	};
-	static @NotNull MalFunction first        = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction first        = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalVal exp = a.nth(0);
 			if (exp == Nil) {
 				return Nil;
@@ -413,8 +414,8 @@
 			return ml.size() > 0 ? ml.nth(0) : Nil;
 		}
 	};
-	static @NotNull MalFunction rest         = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction rest         = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalVal exp = a.nth(0);
 			if (exp == Nil) {
 				return new MalList();
@@ -423,8 +424,8 @@
 			return ml.rest();
 		}
 	};
-	static @NotNull MalFunction nth          = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction nth          = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final Integer idx = ((MalInteger) a.nth(1)).getValue();
 			if (idx < ((MalList) a.nth(0)).size()) {
 				return ((MalList) a.nth(0)).nth(idx);
@@ -434,16 +435,16 @@
 		}
 	};
 	// General sequence functions
-	static @NotNull MalFunction apply        = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction apply        = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalFunction f    = (MalFunction) a.nth(0);
 			final MalList     args = a.slice(1, a.size() - 1);
 			args.value.addAll(((MalList) a.nth(a.size() - 1)).value);
 			return f.apply(args);
 		}
 	};
-	static @NotNull MalFunction map          = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction map          = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalFunction f       = (MalFunction) a.nth(0);
 			final MalList     src_lst = (MalList) a.nth(1);
 			final MalList     new_lst = new MalList();
@@ -454,8 +455,8 @@
 			return new_lst;
 		}
 	};
-	static @NotNull MalFunction conj         = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction conj         = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalList src_seq = (MalList) a.nth(0);
 			final MalList new_seq;
 			if (a.nth(0) instanceof MalVector) {
@@ -474,8 +475,8 @@
 			return new_seq;
 		}
 	};
-	static @NotNull MalFunction seq          = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction seq          = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalVal mv = a.nth(0);
 			if (mv instanceof MalVector) {
 				if (((MalVector) mv).size() == 0) {
@@ -505,8 +506,8 @@
 		}
 	};
 	static          MalFunction meta;
-	static @NotNull MalFunction with_meta    = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList args) throws MalThrowable {
+	static MalFunction with_meta    = new MalFunction() {
+		public MalVal apply(final MalList args) throws MalThrowable {
 			final MalVal new_mv = args.nth(0).copy();
 			new_mv.setMeta(args.nth(1));
 			return new_mv;
@@ -514,18 +515,18 @@
 	};
 
 
-	static @NotNull MalFunction deref      = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction deref      = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalAtom) a.nth(0)).value;
 		}
 	};
-	static @NotNull MalFunction reset_BANG = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction reset_BANG = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return ((MalAtom) a.nth(0)).value = a.nth(1);
 		}
 	};
-	static @NotNull MalFunction swap_BANG  = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction swap_BANG  = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			final MalAtom     atm      = (MalAtom) a.nth(0);
 			final MalFunction f        = (MalFunction) a.nth(1);
 			final MalList     new_args = new MalList();
@@ -538,13 +539,13 @@
 
 	// Metadata functions
 	// Atom functions
-	static @NotNull MalFunction new_atom = new MalFunction() {
-		public @NotNull MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction new_atom = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return new MalAtom(a.nth(0));
 		}
 	};
-	static @NotNull MalFunction atom_Q   = new MalFunction() {
-		public MalVal apply(final @NotNull MalList a) throws MalThrowable {
+	static MalFunction atom_Q   = new MalFunction() {
+		public MalVal apply(final MalList a) throws MalThrowable {
 			return a.nth(0) instanceof MalAtom ? True : False;
 		}
 	};
@@ -552,7 +553,7 @@
 	// types_ns is namespace of type functions
 	static {
 		meta = new MalFunction() {
-			public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+			public MalVal apply(final MalList args) throws MalThrowable {
 				return args.nth(0).getMeta();
 			}
 		};
@@ -627,11 +628,11 @@
 				.build();
 	}
 
-	static public @NotNull Boolean _list_Q(final @NotNull MalVal mv) {
+	static public Boolean _list_Q(final MalVal mv) {
 		return mv.getClass().equals(MalList.class);
 	}
 
-	static public @NotNull Boolean _vector_Q(final @NotNull MalVal mv) {
+	static public Boolean _vector_Q(final MalVal mv) {
 		return mv.getClass().equals(MalVector.class);
 	}
 }
diff -urw mal/env.java ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/env.java
--- mal/env.java	2023-11-24 23:08:27.539960741 -0500
+++ ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/env.java	2023-11-24 19:40:33.370977631 -0500
@@ -1,7 +1,5 @@
 package tripleo.vendor.mal;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 import tripleo.vendor.mal.types.MalException;
 import tripleo.vendor.mal.types.MalList;
 import tripleo.vendor.mal.types.MalSymbol;
@@ -12,14 +10,14 @@
 
 public class env {
 	public static class Env {
-		@Nullable Env                     outer = null;
-		@NotNull  HashMap<String, MalVal> data  = new HashMap<String, MalVal>();
+		Env                     outer = null;
+		HashMap<String, MalVal> data  = new HashMap<String, MalVal>();
 
 		public Env(final Env outer) {
 			this.outer = outer;
 		}
 
-		public Env(final Env outer, final @NotNull MalList binds, final @NotNull MalList exprs) {
+		public Env(final Env outer, final MalList binds, final MalList exprs) {
 			this.outer = outer;
 			for (Integer i = 0; i < binds.size(); i++) {
 				final String sym = ((MalSymbol) binds.nth(i)).getName();
@@ -33,7 +31,7 @@
 			}
 		}
 
-		public @Nullable Env find(final @NotNull MalSymbol key) {
+		public Env find(final MalSymbol key) {
 			if (data.containsKey(key.getName())) {
 				return this;
 			} else if (outer != null) {
@@ -43,7 +41,7 @@
 			}
 		}
 
-		public MalVal get(final @NotNull MalSymbol key) throws MalThrowable {
+		public MalVal get(final MalSymbol key) throws MalThrowable {
 			final Env e = find(key);
 			if (e == null) {
 				throw new MalException(
@@ -53,7 +51,7 @@
 			}
 		}
 
-		public @NotNull Env set(final @NotNull MalSymbol key, final MalVal value) {
+		public Env set(final MalSymbol key, final MalVal value) {
 			data.put(key.getName(), value);
 			return this;
 		}
diff -urw mal/printer.java ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/printer.java
--- mal/printer.java	2023-11-24 14:55:56.659493835 -0500
+++ ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/printer.java	2023-11-24 19:40:33.370977631 -0500
@@ -1,10 +1,9 @@
 package tripleo.vendor.mal;
 
 import com.google.common.base.Joiner;
-import org.apache.commons.lang3.StringEscapeUtils;
-import org.jetbrains.annotations.NotNull;
 import tripleo.vendor.mal.types.MalList;
 import tripleo.vendor.mal.types.MalVal;
+import org.apache.commons.lang3.StringEscapeUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -12,7 +11,7 @@
 
 public class printer {
 
-	public static @NotNull String join(final @NotNull Map<String, MalVal> value,
+    public static String join(final Map<String, MalVal> value,
 									   final String delim, final Boolean print_readably) {
 		final ArrayList<String> strs = new ArrayList<String>();
 		for (final Map.Entry<String, MalVal> entry : value.entrySet()) {
@@ -29,18 +28,18 @@
 		return Joiner.on(" ").join(strs);
 	}
 
-	public static String _pr_str(final @NotNull MalVal mv,
+    public static String _pr_str(final MalVal mv,
 								 final Boolean print_readably) {
 		return mv.toString(print_readably);
 	}
 
-	public static @NotNull String _pr_str_args(final @NotNull MalList args,
-											   final @NotNull String sep, final Boolean print_readably) {
+    public static String _pr_str_args(final MalList args,
+                                      final String sep, final Boolean print_readably) {
 		return join(args.getList(), sep, print_readably);
 	}
 
-	public static @NotNull String join(final @NotNull List<MalVal> value,
-									   final @NotNull String delim, final Boolean print_readably) {
+    public static String join(final List<MalVal> value,
+                              final String delim, final Boolean print_readably) {
 		final ArrayList<String> strs = new ArrayList<String>();
 		for (final MalVal mv : value) {
 			strs.add(mv.toString(print_readably));
diff -urw mal/reader.java ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/reader.java
--- mal/reader.java	2023-11-24 23:08:27.531960702 -0500
+++ ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/reader.java	2023-11-24 19:40:33.370977631 -0500
@@ -1,8 +1,6 @@
 package tripleo.vendor.mal;
 
 import org.apache.commons.lang3.StringEscapeUtils;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 import tripleo.vendor.mal.types.MalContinue;
 import tripleo.vendor.mal.types.MalHashMap;
 import tripleo.vendor.mal.types.MalInteger;
@@ -18,14 +16,14 @@
 import java.util.regex.Pattern;
 
 public class reader {
-	public static @NotNull ArrayList<String> tokenize(final @NotNull String str) {
+	public static ArrayList<String> tokenize(final String str) {
 		final ArrayList<String> tokens  = new ArrayList<String>();
 		final Pattern           pattern = Pattern.compile("[\\s ,]*(~@|[\\[\\]{}()'`~@]|\"(?:[\\\\].|[^\\\\\"])*\"?|;.*|[^\\s \\[\\]{}()'\"`~@,;]*)");
 		final Matcher           matcher = pattern.matcher(str);
 		while (matcher.find()) {
 			final String token = matcher.group(1);
 			if (token != null &&
-                    !token.isEmpty() &&
+			  !token.equals("") &&
 					!(token.charAt(0) == ';')) {
 				tokens.add(token);
 			}
@@ -33,7 +31,7 @@
 		return tokens;
 	}
 
-	public static MalVal read_atom(final @NotNull Reader rdr)
+	public static MalVal read_atom(final Reader rdr)
 	throws ParseError {
 		final String  token   = rdr.next();
 		final Pattern pattern = Pattern.compile("(^-?[0-9]+$)|(^-?[0-9][0-9.]*$)|(^nil$)|(^true$)|(^false$)|^\"((?:[\\\\].|[^\\\\\"])*)\"$|^\"(.*)$|:(.*)|(^[^\"]*$)");
@@ -62,7 +60,7 @@
 		}
 	}
 
-	public static MalVal read_list(final @NotNull Reader rdr, final @NotNull MalList lst, final char start, final char end)
+	public static MalVal read_list(final Reader rdr, final MalList lst, final char start, final char end)
 	throws MalContinue, ParseError {
 		String token = rdr.next();
 		if (token.charAt(0) != start) {
@@ -81,13 +79,13 @@
 		return lst;
 	}
 
-	public static @NotNull MalVal read_hash_map(final @NotNull Reader rdr)
+	public static MalVal read_hash_map(final Reader rdr)
 	throws MalContinue, ParseError {
 		final MalList lst = (MalList) read_list(rdr, new MalList(), '{', '}');
 		return new MalHashMap(lst);
 	}
 
-	public static MalVal read_form(final @NotNull Reader rdr)
+	public static MalVal read_form(final Reader rdr)
 	throws MalContinue, ParseError {
 		final String token = rdr.peek();
 		if (token == null) {
@@ -145,7 +143,7 @@
 		return form;
 	}
 
-	public static MalVal read_str(final @NotNull String str)
+	public static MalVal read_str(final String str)
 	throws MalContinue, ParseError {
 		return read_form(new Reader(tokenize(str)));
 	}
@@ -165,7 +163,7 @@
 			position = 0;
 		}
 
-		public @Nullable String peek() {
+		public String peek() {
 			if (position >= tokens.size()) {
 				return null;
 			} else {
diff -urw mal/readline.java ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/readline.java
--- mal/readline.java	2023-11-24 23:08:27.615961112 -0500
+++ ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/readline.java	2023-11-24 19:40:33.370977631 -0500
@@ -1,54 +1,52 @@
 package tripleo.vendor.mal;
 
-//import com.google.common.io.Files;
-//import com.sun.jna.Library;
-//import com.sun.jna.Native;
-
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
+import com.google.common.io.Files;
+import com.sun.jna.Library;
+import com.sun.jna.Native;
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
+import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.InputStreamReader;
-//import java.nio.charset.StandardCharsets;
-//import java.util.List;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
 
 class readline {
-	static @NotNull  Mode    mode          = Mode.JAVA;// Mode.JNA;
-	static @Nullable String  HISTORY_FILE  = null;
-	static @NotNull  Boolean historyLoaded = false;
+	static Mode mode = Mode.JNA;
+	static String  HISTORY_FILE  = null;
+	static Boolean historyLoaded = false;
 
 	static {
 		HISTORY_FILE = System.getProperty("user.home") + "/.mal-history";
 	}
 
-	public static @NotNull String readline(final String prompt)
+	public static String readline(final String prompt)
 	throws EOFException, IOException {
-		// if (mode == Mode.JNA) {
-		// return jna_readline(prompt);
-		// } else {
+		if (mode == Mode.JNA) {
+			return jna_readline(prompt);
+		} else {
 		return java_readline(prompt);
-		// }
+		}
 	}
 
-	//public static String jna_readline(final String prompt)
-	//throws EOFException, IOException {
-	//	if (!historyLoaded) {
-	//		loadHistory(HISTORY_FILE);
-	//	}
-	//	final String line = RLLibrary.INSTANCE.readline(prompt);
-	//	if (line == null) {
-	//		throw new EOFException();
-	//	}
-	//	RLLibrary.INSTANCE.add_history(line);
-	//	appendHistory(HISTORY_FILE, line);
-	//	return line;
-	//}
+	public static String jna_readline(final String prompt)
+	  throws EOFException, IOException {
+		if (!historyLoaded) {
+			loadHistory(HISTORY_FILE);
+		}
+		final String line = RLLibrary.INSTANCE.readline(prompt);
+		if (line == null) {
+			throw new EOFException();
+		}
+		RLLibrary.INSTANCE.add_history(line);
+		appendHistory(HISTORY_FILE, line);
+		return line;
+	}
 
 	// Just java readline (no history, or line editing)
-	public static @NotNull String java_readline(final String prompt)
+	public static String java_readline(final String prompt)
 	throws EOFException, IOException {
 		System.out.print(prompt);
 		final BufferedReader buffer = new BufferedReader(new InputStreamReader(System.in));
@@ -59,7 +57,6 @@
 		return line;
 	}
 
-/*
 	public static void loadHistory(final String filename) {
 		final File file = new File(filename);
 		try {
@@ -72,9 +69,8 @@
 			// ignore
 		}
 	}
-*/
 
-	public static void appendHistory(final @NotNull String filename, final String line) {
+	public static void appendHistory(final String filename, final String line) {
 		try {
 			final BufferedWriter w;
 			w = new BufferedWriter(new FileWriter(filename, true));
@@ -87,7 +83,6 @@
 
 	public enum Mode {JNA, JAVA}
 
-/*
 	public interface RLLibrary extends Library {
 		// Select a library to use.
 		// WARNING: GNU readline is GPL.
@@ -103,7 +98,6 @@
 
 		void add_history(String line);
 	}
-*/
 
 	public static class EOFException extends Exception {
 	}
diff -urw mal/stepA_mal.java ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/stepA_mal.java
--- mal/stepA_mal.java	2023-11-24 23:08:27.611961093 -0500
+++ ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/stepA_mal.java	2023-11-24 19:40:33.370977631 -0500
@@ -1,9 +1,5 @@
 package tripleo.vendor.mal;
 
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-import tripleo.vendor.mal.env.Env;
 import tripleo.vendor.mal.types.MalException;
 import tripleo.vendor.mal.types.MalFunction;
 import tripleo.vendor.mal.types.MalHashMap;
@@ -22,12 +18,12 @@
 
 public class stepA_mal {
 	// read
-	public static MalVal READ(final @NotNull String str) throws MalThrowable {
+	public static MalVal READ(final String str) throws MalThrowable {
 		return reader.read_str(str);
 	}
 
 	// eval
-	public static @NotNull Boolean starts_with(final MalVal ast, final String sym) {
+	public static Boolean starts_with(final MalVal ast, final String sym) {
 		//  Liskov, forgive me
 		if (ast instanceof MalList && !(ast instanceof MalVector) && ((MalList) ast).size() == 2) {
 			final MalVal a0 = ((MalList) ast).nth(0);
@@ -36,7 +32,6 @@
 		return false;
 	}
 
-	@Contract("null -> null")
 	public static MalVal quasiquote(final MalVal ast) {
 		if ((ast instanceof MalSymbol || ast instanceof MalHashMap))
 			return new MalList(new MalSymbol("quote"), ast);
@@ -60,7 +55,7 @@
 		return res;
 	}
 
-	public static @NotNull Boolean is_macro_call(final MalVal ast, final @NotNull Env env)
+	public static Boolean is_macro_call(final MalVal ast, final env.Env env)
 	throws MalThrowable {
 		if (ast instanceof MalList) {
 			final MalVal a0 = ((MalList) ast).nth(0);
@@ -74,7 +69,7 @@
 		return false;
 	}
 
-	public static MalVal macroexpand(@NotNull MalVal ast, final @NotNull Env env)
+	public static MalVal macroexpand(MalVal ast, final env.Env env)
 	throws MalThrowable {
 		while (is_macro_call(ast, env)) {
 			final MalSymbol   a0  = (MalSymbol) ((MalList) ast).nth(0);
@@ -84,11 +79,10 @@
 		return ast;
 	}
 
-	@Contract("null, _ -> null")
-	public static MalVal eval_ast(final MalVal ast, final @NotNull Env env) throws MalThrowable {
+	public static MalVal eval_ast(final MalVal ast, final env.Env env) throws MalThrowable {
 		if (ast instanceof MalSymbol) {
 			return env.get((MalSymbol) ast);
-		} else if (ast instanceof final @NotNull MalList old_lst) {
+		} else if (ast instanceof final MalList old_lst) {
 			final MalList new_lst = ast.list_Q() ? new MalList()
 					: new MalVector();
 			for (final MalVal mv : (List<MalVal>) old_lst.value) {
@@ -108,7 +102,7 @@
 		}
 	}
 
-	public static @Nullable MalVal EVAL(@NotNull MalVal orig_ast, @NotNull Env env) throws MalThrowable {
+	public static MalVal EVAL(MalVal orig_ast, env.Env env) throws MalThrowable {
 		MalVal  a0, a1, a2, a3, res;
 		MalList el;
 
@@ -146,7 +140,7 @@
 				a2 = ast.nth(2);
 				MalSymbol key;
 				MalVal val;
-				final Env let_env = new Env(env);
+				final tripleo.vendor.mal.env.Env let_env = new env.Env(env);
 				for (int i = 0; i < ((MalList) a1).size(); i += 2) {
 					key = (MalSymbol) ((MalList) a1).nth(i);
 					val = ((MalList) a1).nth(i + 1);
@@ -191,7 +185,7 @@
 								exc = new MalString(t.getMessage() + ": " + tstr);
 							}
 							return EVAL(((MalList) a2).nth(2),
-										new Env(env, ((MalList) a2).slice(1, 2),
+							  new env.Env(env, ((MalList) a2).slice(1, 2),
 												new MalList(exc)));
 						}
 					}
@@ -219,10 +213,10 @@
 			case "fn*":
 				final MalList a1f = (MalList) ast.nth(1);
 				final MalVal a2f = ast.nth(2);
-				final Env cur_env = env;
+				final tripleo.vendor.mal.env.Env cur_env = env;
 				return new MalFunction(a2f, env, a1f) {
-					public MalVal apply(final @NotNull MalList args) throws MalThrowable {
-						return EVAL(a2f, new Env(cur_env, a1f, args));
+					public MalVal apply(final MalList args) throws MalThrowable {
+						return EVAL(a2f, new env.Env(cur_env, a1f, args));
 					}
 				};
 			default:
@@ -241,12 +235,12 @@
 	}
 
 	// print
-	public static String PRINT(final @NotNull MalVal exp) {
+	public static String PRINT(final MalVal exp) {
 		return printer._pr_str(exp, true);
 	}
 
 	// repl
-	public static MalVal RE(final @NotNull Env env, final @NotNull String str) throws MalThrowable {
+	public static MalVal RE(final env.Env env, final String str) throws MalThrowable {
 		return EVAL(READ(str), env);
 	}
 
@@ -256,7 +250,7 @@
 //		final Env repl_env = new Env(null);
 //
 //		// core.java: defined using Java
-//		for (final String key : mal.core.ns.keySet()) {
+//		for (final String key : core.ns.keySet()) {
 //			repl_env.set(new MalSymbol(key), core.ns.get(key));
 //		}
 //		repl_env.set(new MalSymbol("eval"), new MalFunction() {
@@ -320,20 +314,20 @@
 //	}
 
 	public static class MalEnv2 {
-		final Env repl_env = new Env(null);
+		final env.Env repl_env = new env.Env(null);
 
 		{
 			for (final String key : core.ns.keySet()) {
 				repl_env.set(new MalSymbol(key), core.ns.get(key));
 			}
 			repl_env.set(new MalSymbol("eval"), new MalFunction() {
-				public MalVal apply(final @NotNull MalList args) throws MalThrowable {
+				public MalVal apply(final MalList args) throws MalThrowable {
 					return EVAL(args.nth(0), repl_env);
 				}
 			});
 		}
 
-		public MalEnv2(String @Nullable [] args) {
+		public MalEnv2(String[] args) {
 			try {
 				if (args == null) args = new String[]{};
 				init(args);
@@ -342,7 +336,7 @@
 			}
 		}
 
-		public void init(final String @NotNull [] args) throws MalThrowable {
+		public void init(final String[] args) throws MalThrowable {
 			final MalList _argv = new MalList();
 			for (Integer i = 1; i < args.length; i++) {
 				_argv.conj_BANG(new MalString(args[i]));
@@ -366,11 +360,11 @@
 			}
 		}
 
-		public void re(final @NotNull String str) throws MalThrowable {
+		public void re(final String str) throws MalThrowable {
 			RE(repl_env, str);
 		}
 
-		public void set(final @NotNull MalSymbol aSymbol, final MalFunction aFunction) {
+		public void set(final MalSymbol aSymbol, final MalFunction aFunction) {
 			repl_env.set(aSymbol, aFunction);
 		}
 	}
diff -urw mal/types.java ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/types.java
--- mal/types.java	2023-11-24 23:08:27.547960780 -0500
+++ ../../../../.././src-mal/src/main/java/tripleo/vendor/mal/types.java	2023-11-24 19:40:33.370977631 -0500
@@ -1,8 +1,5 @@
 package tripleo.vendor.mal;
 
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -11,11 +8,11 @@
 import java.util.Set;
 
 public class types {
-	public static @NotNull MalConstant Nil   = new MalConstant("nil");
-	public static @NotNull MalConstant True  = new MalConstant("true");
-	public static @NotNull MalConstant False = new MalConstant("false");
+	public static MalConstant Nil   = new MalConstant("nil");
+	public static MalConstant True  = new MalConstant("true");
+	public static MalConstant False = new MalConstant("false");
 
-	public static @NotNull Boolean _equal_Q(final @NotNull MalVal a, final @NotNull MalVal b) {
+	public static Boolean _equal_Q(final MalVal a, final MalVal b) {
 		final Class ota = a.getClass();
 		final Class otb = b.getClass();
 		if (!((ota == otb) ||
@@ -42,7 +39,7 @@
 					}
 				}
 				return true;
-			} else if (a instanceof final @NotNull MalHashMap mhm) {
+			} else if (a instanceof final MalHashMap mhm) {
 				if (((MalHashMap) a).value.size() != ((MalHashMap) b).value.size()) {
 					return false;
 				}
@@ -128,7 +125,7 @@
 			meta = m;
 		}
 
-		public @NotNull Boolean list_Q() {
+		public Boolean list_Q() {
 			return false;
 		}
 	}
@@ -140,7 +137,7 @@
 			value = name;
 		}
 
-		public @NotNull MalConstant copy() throws MalThrowable {
+		public MalConstant copy() throws MalThrowable {
 			return this;
 		}
 
@@ -156,16 +153,16 @@
 			value = v;
 		}
 
-		public @NotNull MalInteger copy() throws MalThrowable {
+		public MalInteger copy() throws MalThrowable {
 			return this;
 		}
 
 		@Override
-		public @NotNull String toString() {
+		public String toString() {
 			return value.toString();
 		}
 
-		public @NotNull MalInteger add(final @NotNull MalInteger other) {
+		public MalInteger add(final MalInteger other) {
 			return new MalInteger(value + other.getValue());
 		}
 
@@ -173,31 +170,31 @@
 			return value;
 		}
 
-		public @NotNull MalInteger subtract(final @NotNull MalInteger other) {
+		public MalInteger subtract(final MalInteger other) {
 			return new MalInteger(value - other.getValue());
 		}
 
-		public @NotNull MalInteger multiply(final @NotNull MalInteger other) {
+		public MalInteger multiply(final MalInteger other) {
 			return new MalInteger(value * other.getValue());
 		}
 
-		public @NotNull MalInteger divide(final @NotNull MalInteger other) {
+		public MalInteger divide(final MalInteger other) {
 			return new MalInteger(value / other.getValue());
 		}
 
-		public MalConstant lt(final @NotNull MalInteger other) {
+		public MalConstant lt(final MalInteger other) {
 			return (value < other.getValue()) ? True : False;
 		}
 
-		public MalConstant lte(final @NotNull MalInteger other) {
+		public MalConstant lte(final MalInteger other) {
 			return (value <= other.getValue()) ? True : False;
 		}
 
-		public MalConstant gt(final @NotNull MalInteger other) {
+		public MalConstant gt(final MalInteger other) {
 			return (value > other.getValue()) ? True : False;
 		}
 
-		public MalConstant gte(final @NotNull MalInteger other) {
+		public MalConstant gte(final MalInteger other) {
 			return (value >= other.getValue()) ? True : False;
 		}
 	}
@@ -209,11 +206,11 @@
 			value = v;
 		}
 
-		public MalSymbol(final @NotNull MalString v) {
+		public MalSymbol(final MalString v) {
 			value = v.getValue();
 		}
 
-		public @NotNull MalSymbol copy() throws MalThrowable {
+		public MalSymbol copy() throws MalThrowable {
 			return this;
 		}
 
@@ -234,11 +231,11 @@
 			value = v;
 		}
 
-		public @NotNull MalString copy() throws MalThrowable {
+		public MalString copy() throws MalThrowable {
 			return this;
 		}
 
-		public @NotNull String toString(final Boolean print_readably) {
+		public String toString(final Boolean print_readably) {
 			if (value.length() > 0 && value.charAt(0) == '\u029e') {
 				return ":" + value.substring(1);
 			} else if (print_readably) {
@@ -253,13 +250,13 @@
 		}
 
 		@Override
-		public @NotNull String toString() {
+		public String toString() {
 			return "\"" + value + "\"";
 		}
 	}
 
 	public static class MalList extends MalVal {
-		@NotNull String start = "(", end = ")";
+		String start = "(", end = ")";
 		List value;
 
 		public MalList(final List val) {
@@ -271,28 +268,28 @@
 			conj_BANG(mvs);
 		}
 
-		public @NotNull MalList conj_BANG(final MalVal... mvs) {
+		public MalList conj_BANG(final MalVal... mvs) {
 			Collections.addAll(value, mvs);
 			return this;
 		}
 
-		public @NotNull MalList copy() throws MalThrowable {
+		public MalList copy() throws MalThrowable {
 			final MalList new_ml = new MalList();
 			new_ml.value.addAll(value);
 			meta = meta;
 			return new_ml;
 		}
 
-		public @NotNull String toString(final Boolean print_readably) {
+		public String toString(final Boolean print_readably) {
 			return start + printer.join(value, " ", print_readably) + end;
 		}
 
-		public @NotNull Boolean list_Q() {
+		public Boolean list_Q() {
 			return true;
 		}
 
 		@Override
-		public @NotNull String toString() {
+		public String toString() {
 			return start + printer.join(value, " ", true) + end;
 		}
 
@@ -304,7 +301,7 @@
 			return (MalVal) value.get(idx);
 		}
 
-		public @NotNull MalList rest() {
+		public MalList rest() {
 			if (size() > 0) {
 				return new MalList(value.subList(1, value.size()));
 			} else {
@@ -312,7 +309,7 @@
 			}
 		}
 
-		public @NotNull Integer size() {
+		public Integer size() {
 			return value.size();
 		}
 
@@ -320,7 +317,7 @@
 			return slice(start, value.size());
 		}
 
-		public @NotNull MalList slice(final Integer start, final Integer end) {
+		public MalList slice(final Integer start, final Integer end) {
 			return new MalList(value.subList(start, end));
 		}
 	}
@@ -339,18 +336,18 @@
 			end   = "]";
 		}
 
-		public @NotNull MalVector copy() throws MalThrowable {
+		public MalVector copy() throws MalThrowable {
 			final MalVector new_mv = new MalVector();
 			new_mv.value.addAll(value);
 			meta = meta;
 			return new_mv;
 		}
 
-		public @NotNull Boolean list_Q() {
+		public Boolean list_Q() {
 			return false;
 		}
 
-		public @NotNull MalVector slice(final Integer start, final Integer end) {
+		public MalVector slice(final Integer start, final Integer end) {
 			return new MalVector(value.subList(start, end));
 		}
 	}
@@ -362,12 +359,12 @@
 			value = val;
 		}
 
-		public MalHashMap(final @NotNull MalList lst) {
+		public MalHashMap(final MalList lst) {
 			value = new HashMap<String, MalVal>();
 			assoc_BANG(lst);
 		}
 
-		public @NotNull MalHashMap assoc_BANG(final @NotNull MalList lst) {
+		public MalHashMap assoc_BANG(final MalList lst) {
 			for (Integer i = 0; i < lst.value.size(); i += 2) {
 				value.put(((MalString) lst.nth(i)).getValue(),
 						  lst.nth(i + 1));
@@ -380,7 +377,7 @@
 			assoc_BANG(mvs);
 		}
 
-		public @NotNull MalHashMap assoc_BANG(final MalVal @NotNull ... mvs) {
+		public MalHashMap assoc_BANG(final MalVal... mvs) {
 			for (Integer i = 0; i < mvs.length; i += 2) {
 				value.put(((MalSymbol) mvs[i]).getName(),
 						  mvs[i + 1]);
@@ -388,7 +385,7 @@
 			return this;
 		}
 
-		public @NotNull MalHashMap copy() throws MalThrowable {
+		public MalHashMap copy() throws MalThrowable {
 			final Map<String, MalVal> shallowCopy = new HashMap<String, MalVal>();
 			shallowCopy.putAll(value);
 			final MalHashMap new_hm = new MalHashMap(shallowCopy);
@@ -396,27 +393,27 @@
 			return new_hm;
 		}
 
-		public @NotNull String toString(final Boolean print_readably) {
+		public String toString(final Boolean print_readably) {
 			return "{" + printer.join(value, " ", print_readably) + "}";
 		}
 
 		@Override
-		public @NotNull String toString() {
+		public String toString() {
 			return "{" + printer.join(value, " ", true) + "}";
 		}
 
-		public @NotNull Set _entries() {
+		public Set _entries() {
 			return value.entrySet();
 		}
 
-		public @NotNull MalHashMap dissoc_BANG(final @NotNull MalList lst) {
+		public MalHashMap dissoc_BANG(final MalList lst) {
 			for (Integer i = 0; i < lst.value.size(); i++) {
 				value.remove(((MalString) lst.nth(i)).getValue());
 			}
 			return this;
 		}
 
-		public @NotNull Integer size() {
+		public Integer size() {
 			return value.size();
 		}
 	}
@@ -428,25 +425,25 @@
 			this.value = value;
 		}
 
-		public @NotNull MalAtom copy() throws MalThrowable {
+		public MalAtom copy() throws MalThrowable {
 			return new MalAtom(value);
 		}
 
-		public @NotNull String toString(final Boolean print_readably) {
+		public String toString(final Boolean print_readably) {
 			return "(atom " + printer._pr_str(value, print_readably) + ")";
 		}
 
 		@Override
-		public @NotNull String toString() {
+		public String toString() {
 			return "(atom " + printer._pr_str(value, true) + ")";
 		}
 	}
 
 	public static abstract class MalFunction extends MalVal
-			implements ILambda, Cloneable {
-		public @Nullable MalVal                               ast    = null;
-		public           tripleo.vendor.mal.env.@Nullable Env env    = null;
-		public @Nullable MalList                              params = null;
+	  implements ILambda, java.lang.Cloneable {
+		public MalVal                     ast    = null;
+		public tripleo.vendor.mal.env.Env env    = null;
+		public MalList                    params = null;
 		public           Boolean                              macro  = false;
 
 		public MalFunction() {
@@ -458,7 +455,7 @@
 			this.params = params;
 		}
 
-		public @NotNull MalFunction copy() throws MalThrowable {
+		public MalFunction copy() throws MalThrowable {
 			try {
 				// WARNING: clone() is broken:
 				//   http://www.artima.com/intv/bloch13.html
@@ -490,7 +487,7 @@
 			return params;
 		}
 
-		public tripleo.vendor.mal.env.@NotNull Env genEnv(final @NotNull MalList args) {
+		public tripleo.vendor.mal.env.Env genEnv(final MalList args) {
 			return new env.Env(env, params, args);
 		}
 
